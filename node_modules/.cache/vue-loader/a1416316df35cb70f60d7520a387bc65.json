{"remainingRequest":"/home/samuele/Desktop/vue/programmable_matter/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/samuele/Desktop/vue/programmable_matter/src/components/GridCell.vue?vue&type=template&id=782571f8&ts=true","dependencies":[{"path":"/home/samuele/Desktop/vue/programmable_matter/src/components/GridCell.vue","mtime":1644252558897},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":499162500000},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPHYtcmVndWxhci1wb2x5Z29uIDpjb25maWc9ImNvbmZpZyI+PC92LXJlZ3VsYXItcG9seWdvbj4KICA8di1saW5lIDpjb25maWc9Imhvcml6b250YWxMaW5lQ29uZmlnIj48L3YtbGluZT4KICA8di1saW5lIDpjb25maWc9ImRpYWcxTGluZUNvbmZpZyI+PC92LWxpbmU+CiAgPHYtbGluZSA6Y29uZmlnPSJkaWFnMkxpbmVDb25maWciPjwvdi1saW5lPgogIDx2LWxpbmUgOmNvbmZpZz0ib3ZlcmZsb3dYTGluZUNvbmZpZyI+PC92LWxpbmU+CiAgPCEtLSA8di10ZXh0CiAgICB2LWZvcj0icG9pbnQgaW4gYWN0aW9uYWJsZVBvaW50cyIKICAgIDprZXk9ImluZGV4ICsgJy1wLScgKyBwb2ludC5ncmlkQ29sICsgJy0nICsgcG9pbnQuZ3JpZFJvdyIKICAgIDpjb25maWc9InsKICAgICAgdGV4dDogJygnICsgcG9pbnQuZ3JpZFJvdyArICcsICcgKyBwb2ludC5ncmlkQ29sICsgJyknLAogICAgICBmb250U2l6ZTogMTUsCiAgICAgIHg6IHBvaW50LngsCiAgICAgIHk6IHBvaW50LnkKICAgIH0iCiAgLz4gLS0+Cg=="},{"version":3,"sources":["/home/samuele/Desktop/vue/programmable_matter/src/components/GridCell.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACvhC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACP,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;MACtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;MACZ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACV,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACX,CAAC;EACH,CAAC,EAAE,CAAC,CAAC","file":"/home/samuele/Desktop/vue/programmable_matter/src/components/GridCell.vue","sourceRoot":"","sourcesContent":["<template>\n  <v-regular-polygon :config=\"config\"></v-regular-polygon>\n  <v-line :config=\"horizontalLineConfig\"></v-line>\n  <v-line :config=\"diag1LineConfig\"></v-line>\n  <v-line :config=\"diag2LineConfig\"></v-line>\n  <v-line :config=\"overflowXLineConfig\"></v-line>\n  <!-- <v-text\n    v-for=\"point in actionablePoints\"\n    :key=\"index + '-p-' + point.gridCol + '-' + point.gridRow\"\n    :config=\"{\n      text: '(' + point.gridRow + ', ' + point.gridCol + ')',\n      fontSize: 15,\n      x: point.x,\n      y: point.y\n    }\"\n  /> -->\n</template>\n\n<script lang=\"ts\">\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable no-constant-condition */\n\nimport { configHexagon, getHexagonApothem, getHexagonXOffset } from '@/shapes'\nimport { defineComponent } from '@vue/runtime-core'\nimport { mapState } from 'vuex'\nexport default defineComponent({\n  name: 'GridCell',\n  props: {\n    index: {\n      type: Number,\n      required: true\n    },\n    x: {\n      type: Number,\n      required: true\n    },\n    y: {\n      type: Number,\n      required: true\n    },\n    row: {\n      type: Number,\n      required: true\n    },\n    col: {\n      type: Number,\n      required: true\n    },\n    gridWidth: {\n      type: Number,\n      required: true\n    }\n  },\n  mounted () {\n    this.$store.commit('pushGridPoints', this.actionablePoints)\n  },\n  methods: {},\n  computed: {\n    config () {\n      return { ...configHexagon, x: this.x, y: this.y, strokeWidth: 0.6 }\n    },\n    horizontalLineConfig () {\n      return {\n        points: [this.x - this.radius, this.y, this.x + this.radius, this.y],\n        stroke: 'black',\n        strokeWidth: 0.5\n      }\n    },\n    verticalLineConfig () {\n      return {\n        points: [this.x, this.y - this.apothem, this.x, this.y + this.apothem],\n        stroke: 'black',\n        strokeWidth: 0.4\n      }\n    },\n    diag1LineConfig () {\n      return {\n        points: [\n          this.x - this.radius + this.xOffset,\n          this.y - this.apothem,\n          this.x + this.radius - this.xOffset,\n          this.y + this.apothem\n        ],\n        stroke: 'black',\n        strokeWidth: 0.3\n      }\n    },\n    diag2LineConfig () {\n      return {\n        points: [\n          this.x + this.radius - this.xOffset,\n          this.y - this.apothem,\n          this.x - this.radius + this.xOffset,\n          this.y + this.apothem\n        ],\n        stroke: 'black',\n        strokeWidth: 0.3\n      }\n    },\n    overflowXLineConfig () {\n      return {\n        points: [\n          this.x + this.radius + this.xOffset,\n          this.y + this.apothem,\n          this.x,\n          this.y + this.apothem\n        ],\n        stroke: 'black',\n        strokeWidth: 0.3\n      }\n    },\n    actionablePoints () {\n      // the vertices and center point\n      return [\n        // top left\n        ...(this.row == 0\n          ? [\n              {\n                // top left\n                x: this.x - this.xOffset,\n                y: this.y - this.apothem,\n                gridCol: this.precedingPointsX,\n                gridRow: this.precedingPointsY\n              }\n            ]\n          : []),\n        ...(true || this.row == 0\n          ? [\n              {\n                // top right\n                x: this.x + this.xOffset,\n                y: this.y - this.apothem,\n                gridCol: this.precedingPointsX + 1,\n                gridRow: this.precedingPointsY\n              }\n            ]\n          : []),\n        {\n          // center left\n          x: this.x - this.apothem - 9,\n          y: this.y,\n          gridCol: this.precedingPointsX,\n          gridRow: this.precedingPointsY + 1\n        },\n        {\n          //center\n          x: this.x,\n          y: this.y,\n          gridCol: this.precedingPointsX + 1,\n          gridRow: this.precedingPointsY + 1\n        },\n        {\n          // center right\n          x: this.x + this.apothem + 9,\n          y: this.y,\n          gridCol: this.precedingPointsX + 2,\n          gridRow: this.precedingPointsY + 1\n        },\n        {\n          // bottom left\n          x: this.x - this.xOffset,\n          y: this.y + this.apothem,\n          gridCol: this.precedingPointsX,\n          gridRow: this.precedingPointsY + 2\n        },\n        ...(this.row == this.gridWidth - 1\n          ? [\n              {\n                // bottom right\n                x: this.x + this.xOffset,\n                y: this.y + this.apothem,\n                gridCol: this.precedingPointsX + 1,\n                gridRow: this.precedingPointsY + 2\n              }\n            ]\n          : [])\n      ]\n    },\n    radius () {\n      return this.config.radius\n    },\n    apothem () {\n      return getHexagonApothem(this.radius)\n    },\n    xOffset () {\n      return getHexagonXOffset(this.radius)\n    },\n    precedingPointsX () {\n      return 2 * this.col\n    },\n    precedingPointsY () {\n      return 2 * this.row\n    }\n  }\n})\n</script>\n\n<style></style>\n"]}]}