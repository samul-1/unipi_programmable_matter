{"remainingRequest":"/home/samuele/Desktop/vue/programmable_matter/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/samuele/Desktop/vue/programmable_matter/src/components/GridCell.vue?vue&type=template&id=782571f8&ts=true","dependencies":[{"path":"/home/samuele/Desktop/vue/programmable_matter/src/components/GridCell.vue","mtime":1643727744463},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":499162500000},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPHYtcmVndWxhci1wb2x5Z29uIDpjb25maWc9ImNvbmZpZyI+PC92LXJlZ3VsYXItcG9seWdvbj4KICA8di1saW5lIDpjb25maWc9Imhvcml6b250YWxMaW5lQ29uZmlnIj48L3YtbGluZT4KICA8di1saW5lIDpjb25maWc9ImRpYWcxTGluZUNvbmZpZyI+PC92LWxpbmU+CiAgPHYtbGluZSA6Y29uZmlnPSJkaWFnMkxpbmVDb25maWciPjwvdi1saW5lPgogIDx2LWxpbmUgOmNvbmZpZz0ib3ZlcmZsb3dYTGluZUNvbmZpZyI+PC92LWxpbmU+CgogIDwhLS0gPHYtY2lyY2xlCiAgICB2LWZvcj0icG9pbnQgaW4gYWN0aW9uYWJsZVBvaW50cyIKICAgIDprZXk9IidhY3QtcHQtJyArIHBvaW50LnggKyAnLScgKyBwb2ludC55IgogICAgOmNvbmZpZz0iewogICAgICB4OiBwb2ludC54LAogICAgICB5OiBwb2ludC55LAogICAgICByYWRpdXM6IDE2LAogICAgICBmaWxsOiBnZXRGaWxsQ29sb3IocG9pbnQpCiAgICB9IgogID48L3YtY2lyY2xlPiAtLT4KICA8di10ZXh0CiAgICA6Y29uZmlnPSJ7CiAgICAgIHRleHQ6ICcoJyArIHJvdyArICcsICcgKyBjb2wgKyAnKScsCiAgICAgIGZvbnRTaXplOiAxNSwKICAgICAgeDogY29uZmlnLngsCiAgICAgIHk6IGNvbmZpZy55CiAgICB9IgogIC8+CgogIDwhLS0gPHYtbGluZSA6Y29uZmlnPSJ2ZXJ0aWNhbExpbmVDb25maWciPjwvdi1saW5lPiAtLT4KICA8IS0tIDx2LWxpbmUgOmNvbmZpZz0ib3ZlcmZsb3dZTGluZUNvbmZpZyI+PC92LWxpbmU+IC0tPgo="},{"version":3,"sources":["/home/samuele/Desktop/vue/programmable_matter/src/components/GridCell.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACvD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC/C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;EAE9C,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACP,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACV,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;MACV,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC;EACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;EACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACP,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;MAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;MACZ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACX,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;EACH,CAAC;;EAED,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;EACtD,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC","file":"/home/samuele/Desktop/vue/programmable_matter/src/components/GridCell.vue","sourceRoot":"","sourcesContent":["<template>\n  <v-regular-polygon :config=\"config\"></v-regular-polygon>\n  <v-line :config=\"horizontalLineConfig\"></v-line>\n  <v-line :config=\"diag1LineConfig\"></v-line>\n  <v-line :config=\"diag2LineConfig\"></v-line>\n  <v-line :config=\"overflowXLineConfig\"></v-line>\n\n  <!-- <v-circle\n    v-for=\"point in actionablePoints\"\n    :key=\"'act-pt-' + point.x + '-' + point.y\"\n    :config=\"{\n      x: point.x,\n      y: point.y,\n      radius: 16,\n      fill: getFillColor(point)\n    }\"\n  ></v-circle> -->\n  <v-text\n    :config=\"{\n      text: '(' + row + ', ' + col + ')',\n      fontSize: 15,\n      x: config.x,\n      y: config.y\n    }\"\n  />\n\n  <!-- <v-line :config=\"verticalLineConfig\"></v-line> -->\n  <!-- <v-line :config=\"overflowYLineConfig\"></v-line> -->\n</template>\n\n<script lang=\"ts\">\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport {\n  configHexagon,\n  getHexagonApothem,\n  getHexagonSide,\n  getHexagonXOffset\n} from '@/shapes'\nimport { defineComponent } from '@vue/runtime-core'\nimport { mapState } from 'vuex'\nexport default defineComponent({\n  name: 'GridCell',\n  props: {\n    index: {\n      type: Number,\n      required: true\n    },\n    x: {\n      type: Number,\n      required: true\n    },\n    y: {\n      type: Number,\n      required: true\n    },\n    row: {\n      type: Number,\n      required: true\n    },\n    col: {\n      type: Number,\n      required: true\n    },\n    gridWidth: {\n      type: Number,\n      required: true\n    }\n  },\n  data () {\n    return {\n      //fillColor: 'yellow'\n    }\n  },\n  mounted () {\n    this.$store.commit('pushGridPoints', this.actionablePoints)\n  },\n  methods: {\n    getRandomColor () {\n      return ['yellow', 'red', 'blue', 'green', 'purple', 'pink', 'orange'][\n        0 ?? Math.floor(Math.random() * 7)\n      ]\n    },\n    getFillColor (p: any) {\n      return p.gridCol == this.selectedPoint.x &&\n        p.gridY == this.selectedPoint.y\n        ? 'red'\n        : 'yellow'\n    }\n  },\n  computed: {\n    config () {\n      return { ...configHexagon, x: this.x, y: this.y, strokeWidth: 0.6 }\n    },\n    horizontalLineConfig () {\n      return {\n        points: [this.x - this.radius, this.y, this.x + this.radius, this.y],\n        stroke: 'black',\n        strokeWidth: 0.5\n      }\n    },\n    verticalLineConfig () {\n      return {\n        points: [this.x, this.y - this.apothem, this.x, this.y + this.apothem],\n        stroke: 'black',\n        strokeWidth: 0.4\n      }\n    },\n    diag1LineConfig () {\n      return {\n        points: [\n          this.x - this.radius + this.xOffset,\n          this.y - this.apothem,\n          this.x + this.radius - this.xOffset,\n          this.y + this.apothem\n        ],\n        stroke: 'black',\n        strokeWidth: 0.3\n      }\n    },\n    diag2LineConfig () {\n      return {\n        points: [\n          this.x + this.radius - this.xOffset,\n          this.y - this.apothem,\n          this.x - this.radius + this.xOffset,\n          this.y + this.apothem\n        ],\n        stroke: 'black',\n        strokeWidth: 0.3\n      }\n    },\n    overflowXLineConfig () {\n      return {\n        points: [\n          this.x + this.radius + this.xOffset,\n          this.y + this.apothem,\n          this.x,\n          this.y + this.apothem\n        ],\n        stroke: 'black',\n        strokeWidth: 0.3\n      }\n    },\n    overflowYLineConfig () {\n      return {\n        points: [\n          this.x + this.radius,\n          this.y,\n          this.x + this.radius,\n          this.y + this.apothem + 2 * this.xOffset\n        ],\n        stroke: 'black',\n        strokeWidth: 0.3\n      }\n    },\n    actionablePoints () {\n      // the vertices and center point\n      return [\n        {\n          // top left\n          x: this.x - this.xOffset,\n          y: this.y - this.apothem,\n          gridCol: this.precedingPointsX,\n          gridY: this.precedingPointsY\n        },\n        {\n          // top right\n          x: this.x + this.xOffset,\n          y: this.y - this.apothem,\n          gridCol: this.precedingPointsX + 1,\n          gridY: this.precedingPointsY\n        },\n        {\n          // center left\n          x: this.x - this.apothem - 9,\n          y: this.y,\n          gridCol: this.precedingPointsX,\n          gridY: this.precedingPointsY + 1\n        },\n        {\n          //center\n          x: this.x,\n          y: this.y,\n          gridCol: this.precedingPointsX + 1,\n          gridY: this.precedingPointsY + 1\n        },\n        {\n          // center right\n          x: this.x + this.apothem + 9,\n          y: this.y,\n          gridCol: this.precedingPointsX + 2,\n          gridY: this.precedingPointsY + 1\n        },\n        {\n          // bottom left\n          x: this.x - this.xOffset,\n          y: this.y + this.apothem,\n          gridCol: this.precedingPointsX,\n          gridY: this.precedingPointsY + 2\n        },\n        {\n          // bottom right\n          x: this.x + this.xOffset,\n          y: this.y + this.apothem,\n          gridCol: this.precedingPointsX + 2,\n          gridY: this.precedingPointsY + 2\n        }\n      ]\n    },\n    selectedActionablePoint () {\n      return this.actionablePoints.findIndex(\n        p =>\n          p.gridCol == this.selectedPoint.x && p.gridY == this.selectedPoint.y\n      )\n    },\n    radius () {\n      return this.config.radius\n    },\n    apothem () {\n      return getHexagonApothem(this.radius)\n    },\n    xOffset () {\n      return getHexagonXOffset(this.radius)\n    },\n    precedingPointsX () {\n      return 2 * this.col\n    },\n    precedingPointsY () {\n      return 2 * this.row\n    },\n    ...mapState(['selectedPoint'])\n  }\n})\n</script>\n\n<style></style>\n"]}]}