{"remainingRequest":"/home/samuele/Desktop/vue/programmable_matter/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/samuele/Desktop/vue/programmable_matter/src/components/Grid.vue?vue&type=template&id=2de7b714&ts=true","dependencies":[{"path":"/home/samuele/Desktop/vue/programmable_matter/src/components/Grid.vue","mtime":1643721903806},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":499162500000},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPGdyaWQtY2VsbAogICAgdi1mb3I9IihjZWxsLCBpbmRleCkgaW4gY2VsbHMiCiAgICA6a2V5PSInY2VsbC0nICsgaW5kZXgiCiAgICA6eD0iY2VsbC54IgogICAgOnJvdz0iZ2V0Um93KGluZGV4KSIKICAgIDpjb2w9ImdldENvbChpbmRleCkiCiAgICA6eT0iY2VsbC55IgogICAgOnJlZj0iJ2NlbGwtJyArIGluZGV4IgogICAgOmluZGV4PSJpbmRleCIKICA+PC9ncmlkLWNlbGw+Cg=="},{"version":3,"sources":["/home/samuele/Desktop/vue/programmable_matter/src/components/Grid.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/home/samuele/Desktop/vue/programmable_matter/src/components/Grid.vue","sourceRoot":"","sourcesContent":["<template>\n  <grid-cell\n    v-for=\"(cell, index) in cells\"\n    :key=\"'cell-' + index\"\n    :x=\"cell.x\"\n    :row=\"getRow(index)\"\n    :col=\"getCol(index)\"\n    :y=\"cell.y\"\n    :ref=\"'cell-' + index\"\n    :index=\"index\"\n  ></grid-cell>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from '@vue/runtime-core'\nimport { configHexagon } from '@/shapes'\nimport GridCell from './GridCell.vue'\nexport default defineComponent({\n  components: { GridCell },\n  name: 'Grid',\n  props: {\n    cellNumber: {\n      type: Number,\n      default: 9\n    },\n    gridWidth: {\n      type: Number,\n      default: 3\n    }\n  },\n  created () {\n    let currX = this.paddingX\n    let currY = this.paddingY\n    this.gapX = this.configHexagon.radius\n    this.gapY = this.configHexagon.radius / 1.38\n    ;[...Array(this.cellNumber)].forEach((_i: number) => {\n      if (\n        currX >\n        this.gridWidth * (this.configHexagon.radius + this.gapX) +\n          this.paddingX -\n          this.configHexagon.radius\n      ) {\n        currY += this.configHexagon.radius + this.gapY\n        currX = this.paddingX\n      }\n      this.cells.push({\n        x: currX,\n        y: currY\n      })\n      currX += this.configHexagon.radius + this.gapX\n    })\n  },\n  data () {\n    return {\n      paddingY: 150,\n      paddingX: 150,\n      gapX: 0,\n      gapY: 0,\n      configHexagon,\n      cells: [] as { x: number; y: number }[]\n    }\n  },\n  methods: {\n    getCellFromCoordinates (x: number, y: number) {\n      if (x > this.gridWidth * 3) {\n        throw new Error('invalid x')\n      }\n      if (y > this.gridWidth * 2 + 1) {\n        throw new Error('invalid y')\n      }\n    },\n    getRow (index: number) {\n      return Math.floor(index / this.gridWidth)\n    },\n    getCol (index: number) {\n      return Math.floor(index % this.gridWidth)\n    }\n  }\n})\n</script>\n\n<style></style>\n"]}]}