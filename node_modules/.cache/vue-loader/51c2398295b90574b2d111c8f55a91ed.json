{"remainingRequest":"/home/samuele/Desktop/vue/programmable_matter/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/samuele/Desktop/vue/programmable_matter/src/components/Grid.vue?vue&type=template&id=2de7b714&ts=true","dependencies":[{"path":"/home/samuele/Desktop/vue/programmable_matter/src/components/Grid.vue","mtime":1643711569748},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":499162500000},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPGRpdj4KICAgIDwhLS0gPHYtcmVndWxhci1wb2x5Z29uCiAgICAgIHYtZm9yPSIoY2VsbCwgaW5kZXgpIGluIGNlbGxzIgogICAgICA6a2V5PSInY2VsbC0nICsgaW5kZXgiCiAgICAgIDpjb25maWc9ImNvbmZpZ0hleGFnb24iCiAgICAgIDp4PSIxMCIKICAgICAgOnk9IjEwIgogICAgPjwvdi1yZWd1bGFyLXBvbHlnb24+IC0tPgogICAgPGdyaWQtY2VsbAogICAgICB2LWZvcj0iKGNlbGwsIGluZGV4KSBpbiBjZWxscyIKICAgICAgOmtleT0iJ2NlbGwtJyArIGluZGV4IgogICAgICA6eD0iY2VsbC54IgogICAgICA6eT0iY2VsbC55IgogICAgPjwvZ3JpZC1jZWxsPgogIDwvZGl2Pgo="},{"version":3,"sources":["/home/samuele/Desktop/vue/programmable_matter/src/components/Grid.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,CAAC;IACF,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;MAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;MACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;MAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;MACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/home/samuele/Desktop/vue/programmable_matter/src/components/Grid.vue","sourceRoot":"","sourcesContent":["<template>\n  <div>\n    <!-- <v-regular-polygon\n      v-for=\"(cell, index) in cells\"\n      :key=\"'cell-' + index\"\n      :config=\"configHexagon\"\n      :x=\"10\"\n      :y=\"10\"\n    ></v-regular-polygon> -->\n    <grid-cell\n      v-for=\"(cell, index) in cells\"\n      :key=\"'cell-' + index\"\n      :x=\"cell.x\"\n      :y=\"cell.y\"\n    ></grid-cell>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from '@vue/runtime-core'\nimport { configHexagon } from '@/shapes'\nimport GridCell from './GridCell.vue'\nexport default defineComponent({\n  components: { GridCell },\n  name: 'Grid',\n  props: {\n    cellNumber: {\n      type: Number,\n      default: 200\n    },\n    gridWidth: {\n      type: Number,\n      default: 25\n    }\n  },\n  created () {\n    let currX = this.paddingX\n    let currY = this.paddingY\n    ;[...Array(this.cellNumber)].forEach(i => {\n      if (\n        currX >\n        this.gridWidth * (this.configHexagon.radius + this.gapX) + this.paddingX\n      ) {\n        currY += this.configHexagon.radius + this.gapY\n        currX = this.paddingX\n      }\n      this.cells.push({\n        x: currX,\n        y: currY\n      })\n      currX += this.configHexagon.radius + this.gapX\n    })\n  },\n  data () {\n    return {\n      paddingY: 50,\n      paddingX: 50,\n      gapX: 22,\n      gapY: 15.5,\n      configHexagon,\n      cells: [] as { x: number; y: number }[]\n    }\n  }\n})\n</script>\n\n<style></style>\n"]}]}