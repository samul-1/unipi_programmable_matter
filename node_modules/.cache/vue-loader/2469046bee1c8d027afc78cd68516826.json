{"remainingRequest":"/home/samuele/Desktop/vue/programmable_matter/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/samuele/Desktop/vue/programmable_matter/src/components/Grid.vue?vue&type=template&id=2de7b714&ts=true","dependencies":[{"path":"/home/samuele/Desktop/vue/programmable_matter/src/components/Grid.vue","mtime":1643728105612},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":499162500000},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPGRpdj4KICAgIDxncmlkLWNlbGwKICAgICAgdi1mb3I9IihjZWxsLCBpbmRleCkgaW4gY2VsbHMiCiAgICAgIDprZXk9IidjZWxsLScgKyBpbmRleCIKICAgICAgOng9ImNlbGwueCIKICAgICAgOnJvdz0iZ2V0Um93KGluZGV4KSIKICAgICAgOmNvbD0iZ2V0Q29sKGluZGV4KSIKICAgICAgOnk9ImNlbGwueSIKICAgICAgOnJlZj0iJ2NlbGwtJyArIGluZGV4IgogICAgICA6aW5kZXg9ImluZGV4IgogICAgICA6Z3JpZFdpZHRoPSJncmlkV2lkdGgiCiAgICA+PC9ncmlkLWNlbGw+CiAgPC9kaXY+Cg=="},{"version":3,"sources":["/home/samuele/Desktop/vue/programmable_matter/src/components/Grid.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,CAAC;IACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;MAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;MACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;MACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/home/samuele/Desktop/vue/programmable_matter/src/components/Grid.vue","sourceRoot":"","sourcesContent":["<template>\n  <div>\n    <grid-cell\n      v-for=\"(cell, index) in cells\"\n      :key=\"'cell-' + index\"\n      :x=\"cell.x\"\n      :row=\"getRow(index)\"\n      :col=\"getCol(index)\"\n      :y=\"cell.y\"\n      :ref=\"'cell-' + index\"\n      :index=\"index\"\n      :gridWidth=\"gridWidth\"\n    ></grid-cell>\n  </div>\n</template>\n\n<script lang=\"ts\">\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { defineComponent } from '@vue/runtime-core'\nimport { configHexagon } from '@/shapes'\nimport GridCell from './GridCell.vue'\nimport { mapState } from 'vuex'\nexport default defineComponent({\n  components: { GridCell },\n  name: 'Grid',\n  props: {\n    cellNumber: {\n      type: Number,\n      default: 16\n    },\n    gridWidth: {\n      type: Number,\n      default: 4\n    }\n  },\n  created () {\n    let currX = this.paddingX\n    let currY = this.paddingY\n    this.gapX = this.configHexagon.radius\n    this.gapY = this.configHexagon.radius / 1.38\n    ;[...Array(this.cellNumber)].forEach((_i: number) => {\n      if (\n        currX >\n        this.gridWidth * (this.configHexagon.radius + this.gapX) +\n          this.paddingX -\n          this.configHexagon.radius\n      ) {\n        currY += this.configHexagon.radius + this.gapY\n        currX = this.paddingX\n      }\n      console.log('pushing')\n      this.pushCell({\n        x: currX,\n        y: currY\n      })\n      currX += this.configHexagon.radius + this.gapX\n    })\n  },\n  data () {\n    return {\n      paddingY: 100,\n      paddingX: 150,\n      gapX: 0,\n      gapY: 0,\n      configHexagon,\n      cells: [] as any\n    }\n  },\n  methods: {\n    pushCell (cell: any) {\n      this.cells.push(cell)\n    },\n    getRow (index: number) {\n      return Math.floor(index / this.gridWidth)\n    },\n    getCol (index: number) {\n      return Math.floor(index % this.gridWidth)\n    }\n  },\n  computed: {\n    // ...mapState(['cells'])\n  }\n})\n</script>\n\n<style></style>\n"]}]}