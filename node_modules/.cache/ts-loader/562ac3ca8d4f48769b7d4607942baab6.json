{"remainingRequest":"/home/samuele/Desktop/vue/programmable_matter/node_modules/babel-loader/lib/index.js!/home/samuele/Desktop/vue/programmable_matter/node_modules/ts-loader/index.js??ref--15-2!/home/samuele/Desktop/vue/programmable_matter/node_modules/eslint-loader/index.js??ref--14-0!/home/samuele/Desktop/vue/programmable_matter/src/scheduler.ts","dependencies":[{"path":"/home/samuele/Desktop/vue/programmable_matter/src/scheduler.ts","mtime":1644779213989},{"path":"/home/samuele/Desktop/vue/programmable_matter/babel.config.js","mtime":1643707685170},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/samuele/Desktop/vue/programmable_matter/node_modules/eslint-loader/index.js??ref--14-0!/home/samuele/Desktop/vue/programmable_matter/src/scheduler.ts"],"names":[],"mappings":"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","sourcesContent":["import { GridPoint, IParticle } from './interfaces';\nimport store from './store';\nimport { sampleSize } from 'lodash';\nimport { getGridDensityAndDiameter } from './stats';\nimport {\n  getRandomRow,\n  getRandomCol,\n  getRandomBool,\n  gridPointToGridCoordinates,\n} from './utils';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst DELAY = 100;\n\n// pushes particles for a new run to the store\nconst createParticles = () => {\n  //eslint-disable-next-line @typescript-eslint/no-extra-semi\n  [...Array(store.state.numParticles)].forEach((_i) => {\n    store.commit('pushParticle', {\n      id: uuidv4(),\n      currentRow: getRandomRow(),\n      currentCol: getRandomCol(),\n      isObstacle: getRandomBool(0),\n    } as IParticle);\n  });\n};\n\nconst getActiveParticles = (): IParticle[] =>\n  store.getters.nonObstacleParticles;\n// sampleSize(\n//   store.getters.nonObstacleParticles,\n//   Math.floor(Math.random() * (store.state.particles.length - 1) + 1)\n// );\n\nconst getNextTarget = (particle: IParticle): GridPoint | null => {\n  const particlePoint = store.getters.getPoint(\n    particle.currentRow,\n    particle.currentCol\n  );\n  const { freeNeighborInterval, obstacle } =\n    store.getters.getFreeNeighborsInterval(particlePoint) as {\n      freeNeighborInterval: GridPoint[];\n      obstacle: boolean;\n    };\n\n  return selectTargetFromInterval(freeNeighborInterval, obstacle);\n};\n\nconst selectTargetFromInterval = (\n  interval: GridPoint[],\n  thereIsObstacle: boolean\n): GridPoint | null => {\n  let algorithm = store.state.algorithm;\n  let targetIndex;\n\n  if (algorithm === 'c') {\n    // algorithm 'c' becomes 'b' if there is an adjacent obstacle, 'a' otherwise\n    algorithm = thereIsObstacle ? 'b' : 'a';\n  }\n\n  if (interval.length <= 2 || interval.length === 6) {\n    // no algorithm makes a move on an interval 1, 2, or 6 cells long\n    return null;\n  }\n  if (interval.length === 5 && algorithm === 'b') {\n    // algorithm 'b' selects second or fourth cell in a 5-cell interval\n    targetIndex = Math.random() > 0.5 ? 1 : 3;\n  } else {\n    // algorithm 'a' or 'b' on a non-5-cell interval always selects the middle cell\n    targetIndex = Math.floor(interval.length / 2);\n  }\n\n  return interval[targetIndex];\n};\n\nconst makeMove = (particle: IParticle): void => {\n  const target = store.getters.getParticleTarget(particle.id);\n\n  // particle was extended towards a free cell; contract into it\n  if (target && store.getters.isGridPointFree(target)) {\n    store.commit('moveParticleToTarget', {\n      id: particle.id,\n    });\n  } else {\n    // particle is contracted inside of a cell; expand towards next target if any\n    const target = getNextTarget(particle);\n    if (target) {\n      store.commit('updateParticleTarget', {\n        id: particle.id,\n        target,\n      });\n    }\n  }\n};\n\nconst MAX_ROUNDS = 500;\n\nexport const run = async (): Promise<void> => {\n  // reset state\n  await store.dispatch('startRun');\n  createParticles();\n\n  // add log with initial data for the run\n  await store.dispatch('addLogRecord');\n\n  const { diameter: initialDiameter, density: initialDensity } =\n    getGridDensityAndDiameter(store.getters.populatedGrid);\n  await store.dispatch('updateCurrentLogRecord', {\n    initialDensity,\n    initialDiameter,\n  });\n\n  let rounds = 0;\n  let moves = 0;\n\n  // eslint-disable-next-line no-constant-condition\n  const handle = setInterval(async () => {\n    // select a subset of all the particles that'll get a chance to make a move this turn\n    const activeParticles = getActiveParticles();\n\n    // update round and moves counters\n    moves += activeParticles.length;\n    rounds++;\n\n    // move particles\n    activeParticles.forEach((p) => makeMove(p));\n\n    // check if problem has been solved or if we've run out of moves\n    if (\n      // failure\n      rounds > MAX_ROUNDS ||\n      // success\n      store.getters.nonObstacleParticles.every(\n        (p: IParticle) =>\n          store.getters.isPointIsolated(\n            store.getters.getPoint(p.currentRow, p.currentCol)\n          ) && store.getters.getParticleState(p) === 'contracted'\n      )\n    ) {\n      clearInterval(handle); // stop particles from moving\n\n      const finalConfiguration = JSON.parse(\n        JSON.stringify(\n          (store.getters.populatedGrid as GridPoint[]).map((p) =>\n            gridPointToGridCoordinates(p)\n          )\n        )\n      );\n      // get final stats and update log record\n      const { density: finalDensity, diameter: finalDiameter } =\n        getGridDensityAndDiameter(\n          store.getters.populatedGrid as GridPoint[]\n        );\n      await store.dispatch('updateCurrentLogRecord', {\n        finalDensity,\n        finalDiameter,\n        moves,\n        rounds,\n        successful: !(rounds > MAX_ROUNDS),\n        finalConfiguration,\n      });\n\n      if (store.state.runCount < store.state.maxRuns) {\n        await run();\n      }\n    }\n  }, DELAY);\n};\n"],"sourceRoot":""}]}