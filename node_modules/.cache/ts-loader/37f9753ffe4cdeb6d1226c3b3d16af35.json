{"remainingRequest":"/home/samuele/Desktop/vue/programmable_matter/node_modules/babel-loader/lib/index.js!/home/samuele/Desktop/vue/programmable_matter/node_modules/ts-loader/index.js??ref--15-2!/home/samuele/Desktop/vue/programmable_matter/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/samuele/Desktop/vue/programmable_matter/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/samuele/Desktop/vue/programmable_matter/src/components/Grid.vue?vue&type=script&lang=ts","dependencies":[{"path":"/home/samuele/Desktop/vue/programmable_matter/src/components/Grid.vue","mtime":1643726620798},{"path":"/home/samuele/Desktop/vue/programmable_matter/babel.config.js","mtime":1643707685170},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/samuele/Desktop/vue/programmable_matter/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICIvaG9tZS9zYW11ZWxlL0Rlc2t0b3AvdnVlL3Byb2dyYW1tYWJsZV9tYXR0ZXIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmVycm9yLmNhdXNlLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZXJyb3IudG8tc3RyaW5nLmpzIjsKCi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi8KaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAnQHZ1ZS9ydW50aW1lLWNvcmUnOwppbXBvcnQgeyBjb25maWdIZXhhZ29uIH0gZnJvbSAnQC9zaGFwZXMnOwppbXBvcnQgR3JpZENlbGwgZnJvbSAnLi9HcmlkQ2VsbC52dWUnOwpleHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoewogIGNvbXBvbmVudHM6IHsKICAgIEdyaWRDZWxsOiBHcmlkQ2VsbAogIH0sCiAgbmFtZTogJ0dyaWQnLAogIHByb3BzOiB7CiAgICBjZWxsTnVtYmVyOiB7CiAgICAgIHR5cGU6IE51bWJlciwKICAgICAgImRlZmF1bHQiOiAxNgogICAgfSwKICAgIGdyaWRXaWR0aDogewogICAgICB0eXBlOiBOdW1iZXIsCiAgICAgICJkZWZhdWx0IjogNAogICAgfQogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgdmFyIGN1cnJYID0gdGhpcy5wYWRkaW5nWDsKICAgIHZhciBjdXJyWSA9IHRoaXMucGFkZGluZ1k7CiAgICB0aGlzLmdhcFggPSB0aGlzLmNvbmZpZ0hleGFnb24ucmFkaXVzOwogICAgdGhpcy5nYXBZID0gdGhpcy5jb25maWdIZXhhZ29uLnJhZGl1cyAvIDEuMzg7CgogICAgX3RvQ29uc3VtYWJsZUFycmF5KEFycmF5KHRoaXMuY2VsbE51bWJlcikpLmZvckVhY2goZnVuY3Rpb24gKF9pKSB7CiAgICAgIGlmIChjdXJyWCA+IF90aGlzLmdyaWRXaWR0aCAqIChfdGhpcy5jb25maWdIZXhhZ29uLnJhZGl1cyArIF90aGlzLmdhcFgpICsgX3RoaXMucGFkZGluZ1ggLSBfdGhpcy5jb25maWdIZXhhZ29uLnJhZGl1cykgewogICAgICAgIGN1cnJZICs9IF90aGlzLmNvbmZpZ0hleGFnb24ucmFkaXVzICsgX3RoaXMuZ2FwWTsKICAgICAgICBjdXJyWCA9IF90aGlzLnBhZGRpbmdYOwogICAgICB9CgogICAgICBjb25zb2xlLmxvZygncHVzaGluZycpOwoKICAgICAgX3RoaXMucHVzaENlbGwoewogICAgICAgIHg6IGN1cnJYLAogICAgICAgIHk6IGN1cnJZCiAgICAgIH0pOwoKICAgICAgY3VyclggKz0gX3RoaXMuY29uZmlnSGV4YWdvbi5yYWRpdXMgKyBfdGhpcy5nYXBYOwogICAgfSk7CiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgcGFkZGluZ1k6IDE1MCwKICAgICAgcGFkZGluZ1g6IDE1MCwKICAgICAgZ2FwWDogMCwKICAgICAgZ2FwWTogMCwKICAgICAgY29uZmlnSGV4YWdvbjogY29uZmlnSGV4YWdvbiwKICAgICAgY2VsbHM6IFtdCiAgICB9OwogIH0sCiAgbWV0aG9kczogewogICAgcHVzaENlbGw6IGZ1bmN0aW9uIHB1c2hDZWxsKGNlbGwpIHsKICAgICAgLy90aGlzLiRzdG9yZS5jb21taXQoJ3B1c2hDZWxsJywgY2VsbCkKICAgICAgdGhpcy5jZWxscy5wdXNoKGNlbGwpOwogICAgfSwKICAgIGdldENlbGxGcm9tQ29vcmRpbmF0ZXM6IGZ1bmN0aW9uIGdldENlbGxGcm9tQ29vcmRpbmF0ZXMoeCwgeSkgewogICAgICBpZiAoeCA+IHRoaXMuZ3JpZFdpZHRoICogMykgewogICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCB4Jyk7CiAgICAgIH0KCiAgICAgIGlmICh5ID4gdGhpcy5ncmlkV2lkdGggKiAyICsgMSkgewogICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCB5Jyk7CiAgICAgIH0KICAgIH0sCiAgICBnZXRSb3c6IGZ1bmN0aW9uIGdldFJvdyhpbmRleCkgewogICAgICByZXR1cm4gTWF0aC5mbG9vcihpbmRleCAvIHRoaXMuZ3JpZFdpZHRoKTsKICAgIH0sCiAgICBnZXRDb2w6IGZ1bmN0aW9uIGdldENvbChpbmRleCkgewogICAgICByZXR1cm4gTWF0aC5mbG9vcihpbmRleCAlIHRoaXMuZ3JpZFdpZHRoKTsKICAgIH0KICB9LAogIGNvbXB1dGVkOiB7Ly8gLi4ubWFwU3RhdGUoWydjZWxscyddKQogIH0KfSk7"},{"version":3,"sources":["/home/samuele/Desktop/vue/programmable_matter/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/samuele/Desktop/vue/programmable_matter/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/samuele/Desktop/vue/programmable_matter/src/components/Grid.vue?vue&type=script&lang=ts"],"names":[],"mappings":";;;;;;;;AACA;AAEA,SAAS,eAAT,QAAgC,mBAAhC;AACA,SAAS,aAAT,QAA8B,UAA9B;AACA,OAAO,QAAP,MAAqB,gBAArB;AAEA,eAAe,eAAe,CAAC;AAC7B,EAAA,UAAU,EAAE;AAAE,IAAA,QAAQ,EAAR;AAAF,GADiB;AAE7B,EAAA,IAAI,EAAE,MAFuB;AAG7B,EAAA,KAAK,EAAE;AACL,IAAA,UAAU,EAAE;AACV,MAAA,IAAI,EAAE,MADI;AAEV,iBAAS;AAFC,KADP;AAKL,IAAA,SAAS,EAAE;AACT,MAAA,IAAI,EAAE,MADG;AAET,iBAAS;AAFA;AALN,GAHsB;AAa7B,EAAA,OAb6B,qBAatB;AAAA;;AACL,QAAI,KAAK,GAAG,KAAK,QAAjB;AACA,QAAI,KAAK,GAAG,KAAK,QAAjB;AACA,SAAK,IAAL,GAAY,KAAK,aAAL,CAAmB,MAA/B;AACA,SAAK,IAAL,GAAY,KAAK,aAAL,CAAmB,MAAnB,GAA4B,IAAxC;;AACC,uBAAI,KAAK,CAAC,KAAK,UAAN,CAAT,EAA4B,OAA5B,CAAoC,UAAC,EAAD,EAAe;AAClD,UACE,KAAK,GACL,KAAI,CAAC,SAAL,IAAkB,KAAI,CAAC,aAAL,CAAmB,MAAnB,GAA4B,KAAI,CAAC,IAAnD,IACE,KAAI,CAAC,QADP,GAEE,KAAI,CAAC,aAAL,CAAmB,MAJvB,EAKE;AACA,QAAA,KAAK,IAAI,KAAI,CAAC,aAAL,CAAmB,MAAnB,GAA4B,KAAI,CAAC,IAA1C;AACA,QAAA,KAAK,GAAG,KAAI,CAAC,QAAb;AACD;;AACD,MAAA,OAAO,CAAC,GAAR,CAAY,SAAZ;;AACA,MAAA,KAAI,CAAC,QAAL,CAAc;AACZ,QAAA,CAAC,EAAE,KADS;AAEZ,QAAA,CAAC,EAAE;AAFS,OAAd;;AAIA,MAAA,KAAK,IAAI,KAAI,CAAC,aAAL,CAAmB,MAAnB,GAA4B,KAAI,CAAC,IAA1C;AACD,KAhBA;AAiBF,GAnC4B;AAoC7B,EAAA,IApC6B,kBAoCzB;AACF,WAAO;AACL,MAAA,QAAQ,EAAE,GADL;AAEL,MAAA,QAAQ,EAAE,GAFL;AAGL,MAAA,IAAI,EAAE,CAHD;AAIL,MAAA,IAAI,EAAE,CAJD;AAKL,MAAA,aAAa,EAAb,aALK;AAML,MAAA,KAAK,EAAE;AANF,KAAP;AAQD,GA7C4B;AA8C7B,EAAA,OAAO,EAAE;AACP,IAAA,QADO,oBACG,IADH,EACY;AACjB;AACA,WAAK,KAAL,CAAW,IAAX,CAAgB,IAAhB;AACD,KAJM;AAKP,IAAA,sBALO,kCAKiB,CALjB,EAK4B,CAL5B,EAKqC;AAC1C,UAAI,CAAC,GAAG,KAAK,SAAL,GAAiB,CAAzB,EAA4B;AAC1B,cAAM,IAAI,KAAJ,CAAU,WAAV,CAAN;AACD;;AACD,UAAI,CAAC,GAAG,KAAK,SAAL,GAAiB,CAAjB,GAAqB,CAA7B,EAAgC;AAC9B,cAAM,IAAI,KAAJ,CAAU,WAAV,CAAN;AACD;AACF,KAZM;AAaP,IAAA,MAbO,kBAaC,KAbD,EAac;AACnB,aAAO,IAAI,CAAC,KAAL,CAAW,KAAK,GAAG,KAAK,SAAxB,CAAP;AACD,KAfM;AAgBP,IAAA,MAhBO,kBAgBC,KAhBD,EAgBc;AACnB,aAAO,IAAI,CAAC,KAAL,CAAW,KAAK,GAAG,KAAK,SAAxB,CAAP;AACD;AAlBM,GA9CoB;AAkE7B,EAAA,QAAQ,EAAE,CACR;AADQ;AAlEmB,CAAD,CAA9B","sourcesContent":["\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { defineComponent } from '@vue/runtime-core'\nimport { configHexagon } from '@/shapes'\nimport GridCell from './GridCell.vue'\nimport { mapState } from 'vuex'\nexport default defineComponent({\n  components: { GridCell },\n  name: 'Grid',\n  props: {\n    cellNumber: {\n      type: Number,\n      default: 16\n    },\n    gridWidth: {\n      type: Number,\n      default: 4\n    }\n  },\n  created () {\n    let currX = this.paddingX\n    let currY = this.paddingY\n    this.gapX = this.configHexagon.radius\n    this.gapY = this.configHexagon.radius / 1.38\n    ;[...Array(this.cellNumber)].forEach((_i: number) => {\n      if (\n        currX >\n        this.gridWidth * (this.configHexagon.radius + this.gapX) +\n          this.paddingX -\n          this.configHexagon.radius\n      ) {\n        currY += this.configHexagon.radius + this.gapY\n        currX = this.paddingX\n      }\n      console.log('pushing')\n      this.pushCell({\n        x: currX,\n        y: currY\n      })\n      currX += this.configHexagon.radius + this.gapX\n    })\n  },\n  data () {\n    return {\n      paddingY: 150,\n      paddingX: 150,\n      gapX: 0,\n      gapY: 0,\n      configHexagon,\n      cells: [] as any\n    }\n  },\n  methods: {\n    pushCell (cell: any) {\n      //this.$store.commit('pushCell', cell)\n      this.cells.push(cell)\n    },\n    getCellFromCoordinates (x: number, y: number) {\n      if (x > this.gridWidth * 3) {\n        throw new Error('invalid x')\n      }\n      if (y > this.gridWidth * 2 + 1) {\n        throw new Error('invalid y')\n      }\n    },\n    getRow (index: number) {\n      return Math.floor(index / this.gridWidth)\n    },\n    getCol (index: number) {\n      return Math.floor(index % this.gridWidth)\n    }\n  },\n  computed: {\n    // ...mapState(['cells'])\n  }\n})\n"],"sourceRoot":""}]}